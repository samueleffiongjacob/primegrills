#version: '3.8'
services:
  auth_service:
    build: ./AUTH
    container_name: authservice
    networks:
      - primegrills_network
    ports:
      - "8000:8000"
    volumes:
      - ./AUTH/auth:/AUTH/auth
    env_file:
      - ./AUTH/.env
    depends_on:
      primegrillsdb:
        condition: service_healthy
    #environment:
      #- DJANGO_SETTINGS_MODULE=your_project.settings.production
    restart: always

  product_service:
    build: ./PRODUCT
    container_name: productservice
    networks:
      - primegrills_network
    ports:
      - "8001:8000"
    volumes:
      - ./PRODUCT/product:/PRODUCT/product
    env_file:
      - ./PRODUCT/.env
    depends_on:
      primegrillsdb:
        condition: service_healthy
      # event_service:
      #   condition: service_started
    restart: always



  order_service:
    build: ./ORDER
    container_name: order_service
    ports:
      - "8002:8000"
    volumes:
      - ./ORDER/order:/ORDER/order
    env_file:
      - ./ORDER/.env
    depends_on:
      primegrillsdb:
        condition: service_healthy
    restart: on-failure


  # EVENT SERVICE
  event_service:
    build: ./EVENTS
    container_name: eventservice
    networks:
      - primegrills_network
    ports:
      - "8003:8000"
    volumes:
      - ./EVENTS/event_service:/EVENTS/event_service
    env_file:
      - ./EVENTS/.env.dev
    depends_on:
      primegrillsdb:
        condition: service_healthy
      rabbitmq:
        condition: service_healthy
    restart: on-failure



    #   account_service:
  #     build: ./account_service
  #     container_name: account_service
  #     ports:
  #       - "8002:8000"
  #     volumes:
  #       - ./account_service:/app
  #     env_file:
  #       - ./account_service/.env
  #     depends_on:
  #       - db

  primegrillsdb:
    image: postgres:17
    container_name: postgres_db
    restart: always
    environment:
      POSTGRES_USER: primegrills
      POSTGRES_PASSWORD: primegrills
      # POSTGRES_DB: primegrills_microservices_db
    volumes:
      - pgdata:/var/lib/postgresql/data
      - ./DATABASE/init.sql:/docker-entrypoint-initdb.d/init.sql # Ensure init.sql runs for database to create
    ports:
      - "5432:5432"
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U primegrills"]
      interval: 5s
      retries: 5
      start_period: 10s
  
  rabbitmq:
    image: rabbitmq:3-management
    container_name: rabbitmq
    networks:
      - primegrills_network
    ports:
      - "5672:5672"   # AMQP protocol port
      - "15672:15672" # Management UI port
    environment:
      - RABBITMQ_DEFAULT_USER=primegrills
      - RABBITMQ_DEFAULT_PASS=primegrills
    volumes:
      - rabbitmq_data:/var/lib/rabbitmq
    healthcheck:
      test: ["CMD", "rabbitmq-diagnostics", "ping"]
      interval: 10s
      timeout: 5s
      retries: 5
    restart: always


  nginx:
    image: nginx:stable-alpine
    container_name: nginx_gateway
    networks:
      - primegrills_network
    volumes:
      - ./nginx/default.conf:/etc/nginx/conf.d/default.conf
    ports:
      - "80:80"
    depends_on:
      - auth_service
     # - account_service
      - event_service
      - rabbitmq

networks:
  primegrills_network:
   driver: bridge


volumes:
  pgdata:
  rabbitmq_data:
  event_data:
